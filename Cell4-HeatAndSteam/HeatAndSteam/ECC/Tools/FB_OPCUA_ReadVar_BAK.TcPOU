<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="FB_OPCUA_ReadVar_BAK" Id="{abf4a416-a347-4887-8788-855fec3c0fce}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_OPCUA_ReadVar_BAK
VAR_INPUT
	bExecute 	: BOOL;		// Start reading
	sVarName	: STRING(MAX_STRING_LENGTH); // Variable to read from OPC UA server
	iTargetSize	: UDINT;	// Size of local target variable
	pTarget		: pVoid;	// Address of local target variable
END_VAR
VAR_OUTPUT
	bDone		: BOOL;		// TRUE when completed without errors
	bBusy		: BOOL;		// TRUE when working
	bError		: BOOL;		// TRUE if error
	nErrorID	: DWORD;	// Error ID from OPC comm. FB's
END_VAR
VAR
	eState					: E_OPCUA_Client_Seq;
	(* Declarations for UA_Connect *)
	fbUA_Connect			: UA_Connect;
	SessionConnectInfo		: ST_UASessionConnectInfo;
	nConnectionHdl			: DWORD;
	(* Declarations for UA_GetNamespaceIndex *)
	fbUA_GetNamespaceIndex 	: UA_GetNamespaceIndex;
	nNamespaceIndex			: UINT;
	(* Declarations for UA_NodeGetHandle *)
	fbUA_NodeGetHandle		: UA_NodeGetHandle;
	NodeID					: ST_UANodeID;
	nNodeHdl				: DWORD;
	(* Declarations for UA_Read *)
	fbUA_Read				: UA_Read;
	stIndexRange			: ARRAY [1..nMaxIndexRange] OF ST_UAIndexRange;
	nIndexRangeCount		: UINT;
	stNodeAddInfo			: ST_UANodeAdditionalInfo;
	cbDataRead				: UDINT;
	(* Declarations for UA_NodeReleaseHandle *)
	fbUA_NodeReleaseHandle	: UA_NodeReleaseHandle;
	(* Declarations for UA_Disconnect *)
	fbUA_Disconnect			: UA_Disconnect;
END_VAR
VAR PERSISTENT
	sOpcUaServerUrl		: STRING(MAX_STRING_LENGTH) := 'opc.tcp://localhost:4840';
	sNamespaceUri		: STRING(MAX_STRING_LENGTH) := 'urn:BeckhoffAutomation:Ua:PLC1'; // TF6100 setup version 4.x default
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eState OF
	E_OPCUA_Client_Seq.Idle:
		IF (bExecute) THEN
			bError := FALSE;
			nErrorID := 0;
			bBusy := TRUE;
	
			SessionConnectInfo.tConnectTimeout := T#1M;
			SessionConnectInfo.tSessionTimeout := T#1M;
			SessionConnectInfo.sApplicationName := '';
			SessionConnectInfo.eSecurityMode := eUASecurityMsgMode_None;
			SessionConnectInfo.eSecurityPolicyUri := eUASecurityPolicy_None;
			SessionConnectInfo.eTransportProfileUri := eUATransportProfileUri_UATcp;
	
	(*		nIndexRange[1].nStartIndex := 0;
			nIndexRange[1].nEndIndex := 1;
			nIndexRange[1].bRangeAccess := TRUE; *)
			stNodeAddInfo.nIndexRangeCount := nIndexRangeCount;
			stNodeAddInfo.stIndexRange := stIndexRange;
			eState := E_OPCUA_Client_Seq.OpenSession;
		END_IF

	E_OPCUA_Client_Seq.CheckData:
		IF ((pTarget <> 0) AND (iTargetSize > 1)) THEN
			eState := E_OPCUA_Client_Seq.OpenSession;
		ELSE
			bError := TRUE;
			bBusy := FALSE;
			eState := E_OPCUA_Client_Seq.Done;
		END_IF

	E_OPCUA_Client_Seq.OpenSession:
		fbUA_Connect(	Execute := TRUE,
						ServerURL := sOpcUaServerUrl,
						SessionConnectInfo := SessionConnectInfo,
						Timeout := T#5S,
						ConnectionHdl => nConnectionHdl	);
	
		IF (NOT fbUA_Connect.Busy) THEN
			fbUA_Connect(Execute := FALSE);
			IF (NOT fbUA_Connect.Error) THEN
				// session opened
				eState := E_OPCUA_Client_Seq.GetNameSpace;
			ELSE
				bError := TRUE;
				nErrorID := fbUA_Connect.ErrorID;
				nConnectionHdl := 0;
				eState := E_OPCUA_Client_Seq.Idle;
			END_IF
		END_IF

	E_OPCUA_Client_Seq.GetNameSpace:
		fbUA_GetNamespaceIndex(	Execute := TRUE,
								ConnectionHdl := nConnectionHdl,
								NamespaceUri := sNamespaceUri,
								NamespaceIndex => nNamespaceIndex	);
	
		IF (NOT fbUA_GetNamespaceIndex.Busy) THEN
			fbUA_GetNamespaceIndex(Execute := FALSE);
			IF NOT fbUA_GetNamespaceIndex.Error THEN
				// Namespace index obtained
				eState := E_OPCUA_Client_Seq.GetNode;
			ELSE
				bError := TRUE;
				nErrorID := fbUA_GetNamespaceIndex.ErrorID;
				eState := E_OPCUA_Client_Seq.CloseSession;
			END_IF
		END_IF

	E_OPCUA_Client_Seq.GetNode:
		NodeID.eIdentifierType := eUAIdentifierType_String;
		NodeID.nNamespaceIndex := nNamespaceIndex;
		NodeID.sIdentifier := sVarName;
		fbUA_NodeGetHandle(	Execute := TRUE,
							ConnectionHdl := nConnectionHdl,
							NodeID := NodeID,
							NodeHdl => nNodeHdl	);
	
		IF (NOT fbUA_NodeGetHandle.Busy) THEN
			fbUA_NodeGetHandle(Execute := FALSE);
			IF (NOT fbUA_NodeGetHandle.Error) THEN
				// Node handle obtained
				eState := E_OPCUA_Client_Seq.Read;
			ELSE
				bError := TRUE;
				nErrorID := fbUA_NodeGetHandle.ErrorID;
				eState := E_OPCUA_Client_Seq.CloseSession;
			END_IF
		END_IF

	E_OPCUA_Client_Seq.Read:
		fbUA_Read(	Execute := TRUE,
					ConnectionHdl := nConnectionHdl,
					NodeHdl := nNodeHdl,
					cbData := iTargetSize,
					stNodeAddInfo := stNodeAddInfo,
					pVariable := pTarget	);
	
		IF (NOT fbUA_Read.Busy) THEN
			fbUA_Read(Execute := FALSE, cbData_R => cbDataRead);
			IF (NOT fbUA_Read.Error) THEN
				// Data read OK
				eState := E_OPCUA_Client_Seq.ReleaseNode;
			ELSE
				bError := TRUE;
				nErrorID := fbUA_Read.ErrorID;
				eState := E_OPCUA_Client_Seq.ReleaseNode;
			END_IF
		END_IF

	E_OPCUA_Client_Seq.ReleaseNode:
		fbUA_NodeReleaseHandle(	Execute := TRUE,
								ConnectionHdl := nConnectionHdl,
								NodeHdl := nNodeHdl	);
	
		IF (NOT fbUA_NodeReleaseHandle.Busy) THEN
			fbUA_NodeReleaseHandle(Execute := FALSE);
			IF (NOT fbUA_NodeReleaseHandle.Error) THEN
				// Node released
				eState := E_OPCUA_Client_Seq.CloseSession;
			ELSE
				bError := TRUE;
				nErrorID := fbUA_NodeReleaseHandle.ErrorID;
				eState := E_OPCUA_Client_Seq.CloseSession;
			END_IF
		END_IF

	E_OPCUA_Client_Seq.CloseSession:
		fbUA_Disconnect(Execute := TRUE, ConnectionHdl := nConnectionHdl	);
		IF (NOT fbUA_Disconnect.Busy) THEN
			fbUA_Disconnect(Execute := FALSE);
			bBusy := FALSE;
			IF (NOT fbUA_Disconnect.Error) THEN
				// session closed
				eState := E_OPCUA_Client_Seq.Done;
				IF (NOT bError) THEN 
					bDone := TRUE;
				END_IF
			ELSE
				bError := TRUE;
				nErrorID := fbUA_Disconnect.ErrorID;
				eState := E_OPCUA_Client_Seq.Done;
				nConnectionHdl := 0;
			END_IF
		END_IF
		
	E_OPCUA_Client_Seq.Done:
		IF (NOT bExecute) THEN
			eState := E_OPCUA_Client_Seq.Idle;
		END_IF

	ELSE
		eState := E_OPCUA_Client_Seq.Idle;

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_OPCUA_ReadVar_BAK">
      <LineId Id="14" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="238" Count="0" />
      <LineId Id="20" Count="14" />
      <LineId Id="287" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="294" Count="2" />
      <LineId Id="298" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="39" Count="3" />
      <LineId Id="44" Count="2" />
      <LineId Id="48" Count="9" />
      <LineId Id="350" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="63" Count="2" />
      <LineId Id="67" Count="3" />
      <LineId Id="223" Count="0" />
      <LineId Id="71" Count="12" />
      <LineId Id="85" Count="2" />
      <LineId Id="89" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="94" Count="6" />
      <LineId Id="102" Count="2" />
      <LineId Id="106" Count="4" />
      <LineId Id="112" Count="2" />
      <LineId Id="116" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="117" Count="6" />
      <LineId Id="125" Count="2" />
      <LineId Id="129" Count="1" />
      <LineId Id="132" Count="2" />
      <LineId Id="136" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="137" Count="6" />
      <LineId Id="145" Count="2" />
      <LineId Id="152" Count="15" />
      <LineId Id="226" Count="4" />
      <LineId Id="214" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>