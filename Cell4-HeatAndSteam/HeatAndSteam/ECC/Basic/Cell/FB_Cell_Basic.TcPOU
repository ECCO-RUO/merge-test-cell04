<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_Cell_Basic" Id="{b122fe9a-fc17-4a92-93a1-3ac1cdfffa3c}" SpecialFunc="None">
    <Declaration><![CDATA[/// Generic FB for cells/stations
/// Contains the PackML state machine and PackTags data
FUNCTION_BLOCK FB_Cell_Basic EXTENDS FB_PLC_Basic IMPLEMENTS ITF_UnitState 
VAR_INPUT
	bResetEStop				: BOOL;
	bLockDoor				: BOOL;
	bUnlockDoor				: BOOL;
	bCellLight				: BOOL;
	iHeartBeatFromMES		: UINT;
END_VAR
VAR_OUTPUT
	bModeChangeInProcess	: BOOL;
	bEStopOK				: BOOL;						// Will result in Abort state in PackML!
	bDoorsOK				: BOOL;
	bCellLightOn			: BOOL;
	iHeartBeatToMES			: UINT;

	bUndefinedDone			: BOOL;						// When the SPS is started, the first state is Undefiend. bUndefinedDone is TRUE, when the method Undefined has succesful finished
	bInvalidModeCommandOut	: BOOL;
	bChangeIntoProduction	: BOOL;
	bStationCommError		: BOOL := FALSE;			// Error communication with station PLC/HW
END_VAR
VAR_IN_OUT
	stModeStateIn			: ST_InputModeState;
	stModeStateOut			: ST_OutputModeState;
	stOEE					: ST_OutputOEE;
	stErrorWarning			: ST_OutputErrorWarning;
END_VAR
VAR
// Mode and State requests
	// Input:
	eMode					: E_PMLProtectedUnitMode := E_PMLProtectedUnitMode.ePMLProtUnitMode_Production;
	eCommand				: E_PMLCommand := E_PMLCommand.ePMLCommand_Undefined;
	bModeChangeRequest		: BOOL;
	// Output:
	eRequestedMode			: E_PMLProtectedUnitMode;
	eCurrentMode			: E_PMLProtectedUnitMode;
	eRequestedState			: E_PMLState;
	eCurrentState			: E_PMLState;	
	
// PackML
	fbUnitModeManager		: PML_UnitModeManager;		// The PML_UnitModeManager manage the Modechanges
	fbStateMachine 			: PML_StateMachine;			// The PML_StateMachine mangae the Statechanges
	nStateModeChange		: INT	:= 0;				// Variable to handle the modechange
	nLastState				: E_PMLState;				// Variable to store last state
	bProductionLocal		: BOOL := FALSE;			// Local Production mode button/command. Must be updated in inherited FB's
	bManualLocal			: BOOL := FALSE;			// Local Manual mode button/command. Must be updated in inherited FB's
	bMaintenanceLocal		: BOOL := FALSE;			// Local Maintenance mode button/command. Must be updated in inherited FB's
	bAbortLocal				: BOOL := FALSE;			// Local abort button/command. Must be updated in inherited FB's
	bStartLocal				: BOOL := FALSE;			// Local start button/command. Must be updated in inherited FB's
	bStopLocal				: BOOL := FALSE;			// Local stop button/command. Must be updated in inherited FB's
	bResetLocal				: BOOL := FALSE;			// Local reset button/command. Must be updated in inherited FB's
	bClearLocal				: BOOL := FALSE;			// Local clear button/command. Must be updated in inherited FB's
	bHoldLocal				: BOOL := FALSE;			// Local hold button/command. Must be updated in inherited FB's
	bUnholdLocal			: BOOL := FALSE;			// Local unhold button/command. Must be updated in inherited FB's
	bSuspendLocal			: BOOL := FALSE;			// Local hold button/command. Must be updated in inherited FB's
	bUnsuspendLocal			: BOOL := FALSE;			// Local unhold button/command. Must be updated in inherited FB's
//Error warning
	arErrorWarningDataCell	: ARRAY [1..255] OF ST_ErrorWarningDataX;
// Recipe	
//	fbRecipe				: FB_RecipeData;			// Recipe data
// DateTime
	fbGetTimePML			: FB_GetTimePML;
// HeartBeat
	fbHeartBeatGen			: FB_GenerateHeartBeat;
	fbHeartBeatCheck		: FB_CheckHeartBeat;
// Misc
	fbGetTime				: NT_GetTime;
END_VAR
VAR_IN_OUT
//	stCommand				: ST_PMLc_ECC;
//	stStatus				: ST_PMLs_ECC;
//	stAdmin					: ST_PMLa_ECC;
//	stService				: ST_PMLse_ECC;
END_VAR
VAR PERSISTENT
	sLineCtrlNetID	AT %Q*	: AMSNETID := [10,38,190,120,1,1];
	iCellID			AT %Q*	: UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Run parent FB!
SUPER^();

// Get system time
fbGetTime(	NETID:= '',	// Local PLC 
			START:= NOT fbGetTime.START AND NOT fbGetTime.BUSY, 
			TMOUT:= T#5S	);

// Heart beat
fbHeartBeatGen(iHeartBeat => iHeartBeatToMES);
fbHeartBeatCheck(iHeartBeat := iHeartBeatFromMES);		

// OEE
M_OEEHandling();			

// Mode state handshake handling
IF ((stModeStateIn.ChangeRequest <> stModeStateOut.ChangeStatus) AND (stModeStateIn.ChangeRequest > 0)) THEN
	// Mode change
	IF ( (stModeStateIn.Mode > 0) AND (stModeStateIn.Mode <= 6) ) THEN
		// Set acknowledge
		IF (stModeStateOut.ChangeAcknowledge <> stModeStateIn.ChangeRequest) THEN
			stModeStateOut.ChangeAcknowledge := stModeStateIn.ChangeRequest;
			stModeStateOut.ModeStateResponse := 0;
			stModeStateOut.DataChange := stModeStateOut.DataChange + 1;
		END_IF
		// Set new mode
		eMode := stModeStateIn.Mode;
		stModeStateOut.RequestedMode := DINT_TO_UINT(eMode);
		// Wait done
		IF (stModeStateIn.Mode = eCurrentMode) THEN
			// Set change status
			stModeStateOut.ChangeStatus := stModeStateIn.ChangeRequest;
			stModeStateOut.ModeStateResponse := 3;
			stModeStateOut.DataChange := stModeStateOut.DataChange + 1;
			stModeStateIn.Mode := E_PML_Mode.Undefined;
		END_IF
	END_IF

	// State change
	IF ( (stModeStateIn.State > 0) AND (stModeStateIn.State <= 10) ) THEN
		// Set acknowledge
		IF (stModeStateOut.ChangeAcknowledge <> stModeStateIn.ChangeRequest) THEN
			stModeStateOut.ChangeAcknowledge := stModeStateIn.ChangeRequest;
			stModeStateOut.ModeStateResponse := 0;
			stModeStateOut.DataChange := stModeStateOut.DataChange + 1;
		END_IF
		// Set new state command
		eCommand := stModeStateIn.State;
		CASE eCommand OF
			E_PML_Command.Reset:
				stModeStateOut.RequestedState := E_PML_State.Idle;

			E_PML_Command.Start:
				stModeStateOut.RequestedState := E_PML_State.Execute;
			
			E_PML_Command.Stop:
				stModeStateOut.RequestedState := E_PML_State.Stopped;
			
			E_PML_Command.Hold:
				stModeStateOut.RequestedState := E_PML_State.Held;
			
			E_PML_Command.Unhold:
				stModeStateOut.RequestedState := E_PML_State.Execute;
			
			E_PML_Command.Suspend:
				stModeStateOut.RequestedState := E_PML_State.Suspended;
			
			E_PML_Command.Unsuspend:
				stModeStateOut.RequestedState := E_PML_State.Execute;
			
			E_PML_Command.Abort:
				stModeStateOut.RequestedState := E_PML_State.Aborted;
			
			E_PML_Command.Clear:
				stModeStateOut.RequestedState := E_PML_State.Stopped;
			
			E_PML_Command.Complete:
				stModeStateOut.RequestedState := E_PML_State.Complete;
			
		END_CASE
		// Wait done
		IF (stModeStateOut.RequestedState = eCurrentState) THEN
			// Set change status
			stModeStateOut.ChangeStatus := stModeStateIn.ChangeRequest;
			stModeStateOut.DataChange := stModeStateOut.DataChange + 1;
			stModeStateOut.ModeStateResponse := 3;
			stModeStateIn.State := E_PML_Command.Undefined;
			eCommand := E_PML_Command.Undefined;
		END_IF
	END_IF
END_IF

// Run State Machine
M_PackML_StateMachine();


// Update current mode/state
IF (DINT_TO_UINT(eCurrentMode) <> stModeStateOut.CurrentMode) THEN
	stModeStateOut.CurrentMode := DINT_TO_UINT(eCurrentMode);
	stModeStateOut.DataChange := stModeStateOut.DataChange + 1;	
END_IF
IF (DINT_TO_UINT(eCurrentState) <> stModeStateOut.CurrentState) THEN
	stModeStateOut.CurrentState := DINT_TO_UINT(eCurrentState);
	stModeStateOut.DataChange := stModeStateOut.DataChange + 1;	
END_IF
]]></ST>
    </Implementation>
    <Method Name="M_Aborted" Id="{8244d800-8dc9-4720-85c9-6f54f77cd9dd}">
      <Declaration><![CDATA[/// Static state "Aborted"
/// Trigged by "StateCompleted" when in "Aborting" state
/// Requires "Clear" to go to "Clearing" state 
{attribute 'object_name' := 'M_Aborted'}
METHOD M_Aborted
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborting" Id="{f8040a1f-a838-4329-b79d-d290c1cc2f29}">
      <Declaration><![CDATA[/// Dynamic state "Aborting"
/// Trigged by "Abort" command
/// Requires "StateCompleted" to go to "Aborted" state 
{attribute 'object_name' := 'M_Aborting'}
METHOD M_Aborting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clearing" Id="{c1d534ca-4e6a-4b3c-9fa7-ea8b88cacee4}">
      <Declaration><![CDATA[/// Dynamic state "Clearing"
/// Trigged by "Clear" command "Aborted" state
/// Requires "StateCompleted" to go to "Stopped" state 
{attribute 'object_name' := 'M_Clearing'}
METHOD M_Clearing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Complete" Id="{7fd442f3-78a6-434f-854c-fb666ba77957}">
      <Declaration><![CDATA[/// Static state "Complete"
/// Trigged by "StateCompleted" when in "Completing" state
/// Requires "Reset" to go to "Resetting" state 
{attribute 'object_name' := 'M_Complete'}
METHOD M_Complete
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Completing" Id="{4358dbce-8d40-4c60-a40d-96fafdd250e1}">
      <Declaration><![CDATA[/// Dynamic state "Completing"
/// Trigged by "StageCompleted" command when in "Execute" state
/// Requires "StateCompleted" to go to "Complete" state 
{attribute 'object_name' := 'M_Completing'}
METHOD M_Completing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ErrorWarningAdd" Id="{9a739645-29ce-4880-84dd-521dd29d145c}">
      <Declaration><![CDATA[METHOD M_ErrorWarningAdd : BOOL
VAR_INPUT
	//stInErrorWarning: ST_OutputErrorWarning;
	
	sLocationID		: STRING;
END_VAR
VAR_IN_OUT
	arInErrorWarningList: ARRAY [1..255] OF ST_ErrorWarningDataX;
END_VAR
VAR
	i				: UINT;
	j				: UINT:=1;
	iNoAlarms		: UINT;
	iNoWarnings		: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:= 1 TO 255 DO
	IF arInErrorWarningList[i].ErrorWarningID <> 0 THEN
		REPEAT
			//Find first empty spot
			IF stErrorWarning.ErrorWarningData[j].ErrorWarningID = 0 THEN
				
				stErrorWarning.ErrorWarningData[j] := arInErrorWarningList[i];
				stErrorWarning.ErrorWarningData[j].LocationID := sLocationID;
				
				IF stErrorWarning.ErrorWarningData[j].ErrorWarningType = 1 THEN
					iNoWarnings := iNoWarnings +1;
				ELSIF stErrorWarning.ErrorWarningData[j].ErrorWarningType = 2 THEN
					iNoAlarms := iNoAlarms +1;
				END_IF
				
				EXIT;
			END_IF
			j := j + 1;
		UNTIL j = 255 END_REPEAT
	ELSE
		EXIT;
	END_IF
END_FOR

//Update number of erros and warnings
stErrorWarning.NumberOfErrors := stErrorWarning.NumberOfErrors + iNoAlarms;
stErrorWarning.NumberOfWarnings := stErrorWarning.NumberOfWarnings + iNoWarnings;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ErrorWarningClear" Id="{5e63b052-87e7-49e5-97b5-fda46ea5464f}">
      <Declaration><![CDATA[METHOD M_ErrorWarningClear : BOOL
VAR_INPUT

END_VAR
VAR
	i				: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//FOR i:= 1 TO 255 DO
//	MEMSET(ADR(stErrorWarning.ErrorWarningData[i]), 0, SIZEOF(stErrorWarning.ErrorWarningData[i]));
//END_FOR
MEMSET(ADR(stErrorWarning.ErrorWarningData), 0, SIZEOF(stErrorWarning.ErrorWarningData));

stErrorWarning.NumberOfErrors := 0;
stErrorWarning.NumberOfWarnings := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ErrorWarningObj" Id="{86a36a6f-6870-4215-8ba0-7e0800fca48a}">
      <Declaration><![CDATA[METHOD M_ErrorWarningObj : BOOL
VAR_INPUT
	bActive				: BOOL;
	iErrorWarningType	: UINT;
	diErrorWarningID 	: UDINT;
	sDeviceID			: STRING(30);
	iSeverity			: UINT;
	iNativeID			: UDINT;
	sNativeMessage		: STRING(80);
END_VAR
VAR_IN_OUT
	arErrorWaringData	: ARRAY [1..255] OF ST_ErrorWarningDataX;
END_VAR
VAR
	iFoundPos			: UINT;
	i					: UINT;
	j					: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Look through array to find existing record(s)
FOR i := 1 TO 255 DO
	IF arErrorWaringData[i].ErrorWarningID = 0 THEN
		EXIT;
	END_IF
	//Existing alarm - first
	IF arErrorWaringData[i].ErrorWarningID = diErrorWarningID AND iFoundPos = 0 THEN
		iFoundPos := i;
	//Multiple records - delete
	ELSIF arErrorWaringData[i].ErrorWarningID = diErrorWarningID AND iFoundPos <> 0 THEN
		MEMSET(ADR(arErrorWaringData[i]), 0, SIZEOF(arErrorWaringData[i]));
		M_ErrorWarningObj := TRUE;
	END_IF
END_FOR

//Alarm high
IF bActive THEN
	//New alarm
	IF iFoundPos = 0 THEN
		arErrorWaringData[i].ErrorWarningType := iErrorWarningType;
		arErrorWaringData[i].DeviceID := sDeviceID;
		arErrorWaringData[i].Severity := iSeverity;
		arErrorWaringData[i].NativeID := iNativeID;
		arErrorWaringData[i].NativeMessage := sNativeMessage;
		arErrorWaringData[i].ErrorWarningID := diErrorWarningID;
		arErrorWaringData[i].DateTime := SYSTEMTIME_TO_STRING(fbGetTime.TIMESTR);
		M_ErrorWarningObj := TRUE;
	END_IF
	
//Alarm low
ELSIF NOT bActive AND iFoundPos <> 0 THEN
	MEMSET(ADR(arErrorWaringData[iFoundPos]), 0, SIZEOF(arErrorWaringData[iFoundPos]));
	M_ErrorWarningObj := TRUE;
END_IF

//Defrag
IF M_ErrorWarningObj THEN
	FOR i:= 1 TO 254 DO
		//Find first empty spot
		IF arErrorWaringData[i].ErrorWarningID = 0 THEN
			//Find first record
			FOR j:= i TO 255 DO
				IF arErrorWaringData[j].ErrorWarningID <> 0 THEN
					//Move to empty spot
					arErrorWaringData[i] := arErrorWaringData[j];
					MEMSET(ADR(arErrorWaringData[j]), 0, SIZEOF(arErrorWaringData[j]));
					EXIT;
				END_IF
			END_FOR
		END_IF
		//No more records
		IF j >= 255 THEN
			RETURN;
		END_IF
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{220611b7-5175-4e1c-a9f1-989b142fa365}">
      <Declaration><![CDATA[/// Static state "Execute"
/// Trigged by "StageCompleted" when in "Starting" state
/// Trigged by "StageCompleted" when in "Unholding" state
/// Trigged by "StageCompleted" when in "Unsuspending" state
/// Requires "Hold" command to go to "Holding" state 
/// Requires "Suspend" command to go to "Suspending" state 
/// Requires "StageCompleted" to go to "Completing" state 
{attribute 'object_name' := 'M_Execute'}
METHOD M_Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Held" Id="{c41b95cf-4e74-4f6c-b381-b7974e85fc99}">
      <Declaration><![CDATA[/// Static state "Held"
/// Trigged by "StateCompleted" when in "Holding" state
/// Requires "Unhold" command to go to "Unholding" state 
{attribute 'object_name' := 'M_Held'}
METHOD M_Held
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Holding" Id="{8b8d083b-f4d8-4e82-b7ac-54ec53188d22}">
      <Declaration><![CDATA[/// Dynamic state "Holding"
/// Trigged by "Hold" command when in "Execute" state
/// Requires "StateCompleted" to go to "Held" state 
{attribute 'object_name' := 'M_Holding'}
METHOD M_Holding
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Idle" Id="{d988b795-a0e0-48b1-bf6d-b7b161d14621}">
      <Declaration><![CDATA[/// Static state "Idle"
/// Trigged by "StateCompleted" when in "Resetting" state
/// Requires "Start" command to go to "Starting" state 
{attribute 'object_name' := 'M_Idle'}
METHOD M_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OEEHandling" Id="{b81f568e-8c8f-47a8-8b6c-6d2c456e8301}">
      <Declaration><![CDATA[METHOD PROTECTED M_OEEHandling
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Must be overloaded in derived FB's!
;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PackML_StateMachine" Id="{f87f4afc-9c27-410d-b9be-3090d814f037}">
      <Declaration><![CDATA[METHOD PROTECTED M_PackML_StateMachine : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nStateModeChange OF

	0:	// Waiting for user request
		IF (NOT bModeChangeInProcess) THEN
			// Local unit mode change request
			IF (bProductionLocal AND (eCurrentMode <> Tc3_PackML_V2.ePMLProtUnitMode_Production)) THEN
				eMode := ePMLProtUnitMode_Production;
				bModeChangeRequest := TRUE;
			ELSIF (bManualLocal AND (eCurrentMode <> Tc3_PackML_V2.ePMLProtUnitMode_Manual)) THEN
				eMode := ePMLProtUnitMode_Manual;
				bModeChangeRequest := TRUE;
			ELSIF (bMaintenanceLocal AND (eCurrentMode <> Tc3_PackML_V2.ePMLProtUnitMode_Maintenance)) THEN
				eMode := ePMLProtUnitMode_Maintenance;
				bModeChangeRequest := TRUE;
			END_IF
		END_IF
		bChangeIntoProduction := FALSE;
		IF ((eMode = ePMLProtUnitMode_Production) AND (eCurrentMode = ePMLProtUnitMode_Invalid)) THEN
			nStateModeChange := 1;
		ELSIF (bModeChangeRequest AND (eMode <> ePMLProtUnitMode_Production)) THEN
			nStateModeChange := 1;
		ELSIF ((eMode = ePMLProtUnitMode_Production) AND (eCurrentMode <> ePMLProtUnitMode_Production)) THEN
			nStateModeChange := 3;
		END_IF
		
	1:	// Starting UnitModeManager 
		fbUnitModeManager.bExecute := TRUE;
		fbUnitModeManager.eModeCommand := eMode;
		bModeChangeInProcess := TRUE;
	
		IF (fbUnitModeManager.bDone) THEN
			fbUnitModeManager.bExecute := FALSE;
			bInvalidModeCommandOut := FALSE;
			nStateModeChange := 0;
			bChangeIntoProduction := FALSE;
			bModeChangeInProcess := FALSE;
		ELSIF (fbUnitModeManager.bError) THEN
			bInvalidModeCommandOut := TRUE;
			fbUnitModeManager.bExecute := FALSE;
			nLastState := eCurrentState;
			nStateModeChange := 2;
			bChangeIntoProduction := FALSE;
			bModeChangeInProcess := FALSE;
		END_IF
	
	2:	// ErrorHanddling
		IF (bModeChangeRequest) THEN
			nStateModeChange := 0;
			bInvalidModeCommandOut := FALSE;
		ELSIF (nLastState <> eCurrentState) THEN
			bInvalidModeCommandOut := FALSE;
		END_IF
		
	3:	// state to check, if command 'Production' is valid
		IF ((eCurrentState = ePMLState_Aborted) OR (eCurrentState = ePMLState_Stopped) OR (eCurrentState = ePMLState_Idle)) THEN
			bChangeIntoProduction := TRUE;
			nStateModeChange := 1;
		ELSE
			nStateModeChange := 2;
			bInvalidModeCommandOut := TRUE;
			nLastState := eCurrentState;
		END_IF
END_CASE


// Run Unit Mode Manager
fbUnitModeManager(	eState := eCurrentState,
					eModeStatus => eCurrentMode,
					bDone => ,
					bError => ,
					nErrorId => 	);

IF (fbUnitModeManager.eModeStatus <> 0) THEN
	// Local E-stop/abort handling	
	IF (NOT bEStopOK OR bAbortLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Abort;
	// Local Start handling
	ELSIF (bStartLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Start;
	// Local Stop handling
	ELSIF (bStopLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Stop;
	// Local Reset handling
	ELSIF (bResetLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Reset;
	// Local Clear handling
	ELSIF (bClearLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Clear;
	// Local Hold handling
	ELSIF (bHoldLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Hold;
	// Local Unhold handling
	ELSIF (bUnholdLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Unhold;
	// Local Suspend handling
	ELSIF (bSuspendLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Suspend;
	// Local Unsuspend handling
	ELSIF (bSuspendLocal) THEN
		eCommand := E_PMLCommand.ePMLCommand_Unsuspend;
	// 
	ELSIF (stModeStateIn.State = 0) THEN
		eCommand := E_PMLCommand.ePMLCommand_Undefined;
	END_IF
	
	// Calling the StateMachine, when there is a valid Mode
	fbStateMachine(	eMode := eCurrentMode, 				
					eCommand := eCommand,			
					stSubUnitInfoRef := ,
					stOptions := , 
					eState => eCurrentState, 				
					bError => , 
					nErrorID => 	);

END_IF

// Requested state:
CASE eCommand OF			
	E_PMLCommand.ePMLCommand_Abort:
		eRequestedState := E_PMLState.ePMLState_Aborted;
		
	E_PMLCommand.ePMLCommand_Clear:
		eRequestedState := E_PMLState.ePMLState_Stopped;

	E_PMLCommand.ePMLCommand_Complete:
		eRequestedState := E_PMLState.ePMLState_Complete;
		
	E_PMLCommand.ePMLCommand_Hold:
		eRequestedState := E_PMLState.ePMLState_Held;
		
	E_PMLCommand.ePMLCommand_Reset:
		eRequestedState := E_PMLState.ePMLState_Idle;
		
	E_PMLCommand.ePMLCommand_Start:
		eRequestedState := E_PMLState.ePMLState_Execute;
		
	E_PMLCommand.ePMLCommand_Stop:
		eRequestedState := E_PMLState.ePMLState_Stopped;
		
	E_PMLCommand.ePMLCommand_Suspend:
		eRequestedState := E_PMLState.ePMLState_Suspended;
		
	E_PMLCommand.ePMLCommand_Unhold:
		eRequestedState := E_PMLState.ePMLState_Execute;
		
	E_PMLCommand.ePMLCommand_Unsuspend:
		eRequestedState := E_PMLState.ePMLState_Execute;
		
END_CASE

//One of the methods is executing by the actual state
CASE eCurrentState OF
	ePMLState_Undefined:
		M_Undefined();
	ePMLState_Clearing:
		M_Clearing();
	ePMLState_Stopped:
		M_Stopped();
	ePMLState_Starting:
		M_Starting();
	ePMLState_Idle:
		M_Idle();
	ePMLState_Suspended:
		M_Suspended();
	ePMLState_Execute:
		M_Execute();
	ePMLState_Stopping:
		M_Stopping();
	ePMLState_Aborting:
		M_Aborting();
	ePMLState_Aborted:
		M_Aborted();
	ePMLState_Holding:
		M_Holding();
	ePMLState_Held:
		M_Held();
	ePMLState_Unholding:
		M_Unholding();
	ePMLState_Suspending:
		M_Suspending();
	ePMLState_Unsuspending:
		M_Unsuspending();
	ePMLState_Resetting:
		M_Resetting();
	ePMLState_Completing:
		M_Completing();
	ePMLState_Complete:
		M_Complete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{5304eafd-79f6-419b-baed-e44d246dacd2}">
      <Declaration><![CDATA[/// Dynamic state "Resetting"
/// Trigged by "Reset" command when in "Stopped" state
/// Requires "StateCompleted" to go to "Idle" state 
{attribute 'object_name' := 'M_Resetting'}
METHOD M_Resetting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{10fa9033-5e80-404f-bfae-5243eb57c006}">
      <Declaration><![CDATA[/// Dynamic state "Starting"
/// Trigged by "Start" command when in "Idle" state
/// Requires "StateCompleted" to go to "Execute" state 
{attribute 'object_name' := 'M_Starting'}
METHOD M_Starting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateComplete" Id="{3fe1e35f-f5df-45cc-96a8-41e6eaea551d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_StateComplete'}
METHOD M_StateComplete
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//the actual state is completed
fbStateMachine.M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopped" Id="{610a545b-dcfa-492f-a831-7caedea08cd7}">
      <Declaration><![CDATA[/// Static state "Stopped"
/// Trigged by "StateCompleted" when in "Stopping" state
/// Requires "Reset" command to go to "Resetting" state 
{attribute 'object_name' := 'M_Stopped'}
METHOD M_Stopped
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{c21d8acc-aa1f-4c70-ae46-ebcc68763f74}">
      <Declaration><![CDATA[/// Dynamic state "Stopping"
/// Trigged by "Stop" command
/// Requires "StateCompleted" to go to "Stopped" state 
{attribute 'object_name' := 'M_Stopping'}
METHOD M_Stopping
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Suspended" Id="{e4c26b36-daac-4804-b093-22fed55cf6f7}">
      <Declaration><![CDATA[/// Static state "Suspended"
/// Trigged by "StateCompleted" when in "Suspending" state
/// Requires "Unsuspend" command to go to "Unsuspending" state 
{attribute 'object_name' := 'M_Suspended'}
METHOD M_Suspended
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Suspending" Id="{6ddd41bf-7585-4726-853f-b0e717c7d174}">
      <Declaration><![CDATA[/// Dynamic state "Suspending"
/// Trigged by "Suspend" command when in "Execute" state
/// Requires "StateCompleted" to go to "Suspended" state 
{attribute 'object_name' := 'M_Suspending'}
METHOD M_Suspending
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Undefined" Id="{010cb873-7dcc-444d-88dd-69c93ab52fd5}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Undefined'}
METHOD M_Undefined
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Unholding" Id="{0a9b13cd-6417-4bde-8bb5-38f360859755}">
      <Declaration><![CDATA[/// Dynamic state "Unholding"
/// Trigged by "Unhold" command when in "Held" state
/// Requires "StateCompleted" to go to "Execute" state 
{attribute 'object_name' := 'M_Unholding'}
METHOD M_Unholding
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Unsuspending" Id="{ff329d42-8f38-4ea2-87f5-e7a1ef1b6380}">
      <Declaration><![CDATA[/// Dynamic state "Unsuspending"
/// Trigged by "Unsuspend" command when in "Suspended" state
/// Requires "StateCompleted" to go to "Execute" state 
{attribute 'object_name' := 'M_Unsuspending'}
METHOD M_Unsuspending
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Cell_Basic">
      <LineId Id="899" Count="1" />
      <LineId Id="1158" Count="0" />
      <LineId Id="1241" Count="4" />
      <LineId Id="905" Count="2" />
      <LineId Id="1235" Count="0" />
      <LineId Id="1234" Count="0" />
      <LineId Id="1236" Count="0" />
      <LineId Id="908" Count="65" />
      <LineId Id="1072" Count="8" />
      <LineId Id="983" Count="15" />
      <LineId Id="1156" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Aborted">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Aborting">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Clearing">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Complete">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Completing">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_ErrorWarningAdd">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="65" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_ErrorWarningClear">
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_ErrorWarningObj">
      <LineId Id="111" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="195" Count="2" />
      <LineId Id="112" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="134" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="2" />
      <LineId Id="170" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="213" Count="2" />
      <LineId Id="176" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Execute">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Held">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Holding">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Idle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_OEEHandling">
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_PackML_StateMachine">
      <LineId Id="124" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="9" Count="7" />
      <LineId Id="117" Count="0" />
      <LineId Id="18" Count="14" />
      <LineId Id="34" Count="15" />
      <LineId Id="116" Count="0" />
      <LineId Id="50" Count="15" />
      <LineId Id="122" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="142" Count="2" />
      <LineId Id="146" Count="2" />
      <LineId Id="150" Count="2" />
      <LineId Id="154" Count="2" />
      <LineId Id="220" Count="2" />
      <LineId Id="224" Count="2" />
      <LineId Id="231" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="69" Count="5" />
      <LineId Id="181" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="182" Count="31" />
      <LineId Id="216" Count="0" />
      <LineId Id="77" Count="38" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Resetting">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Starting">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_StateComplete">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Stopped">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Stopping">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Suspended">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Suspending">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Undefined">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Unholding">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell_Basic.M_Unsuspending">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>